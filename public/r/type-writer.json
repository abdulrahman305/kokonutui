{
  "name": "type-writer",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\n/**\n * @author: @dorian_baffier\n * @description: Typewriter\n * @version: 1.0.0\n * @date: 2025-06-26\n * @license: MIT\n * @website: https://kokonutui.com\n * @github: https://github.com/kokonut-labs/kokonutui\n */\n\nimport { motion, useAnimate } from \"motion/react\";\nimport { useEffect } from \"react\";\n\ninterface TypewriterSequence {\n  text: string;\n  deleteAfter?: boolean;\n  pauseAfter?: number;\n}\n\ninterface TypewriterTitleProps {\n  sequences?: TypewriterSequence[];\n  typingSpeed?: number;\n  startDelay?: number;\n  autoLoop?: boolean;\n  loopDelay?: number;\n}\n\nexport default function TypewriterTitle({\n  sequences = [\n    { text: \"Typewriter\", deleteAfter: true },\n    { text: \"Multiple Words\", deleteAfter: true },\n    { text: \"Auto Loop\", deleteAfter: false },\n  ],\n  typingSpeed = 50,\n  startDelay = 500,\n  autoLoop = true,\n  loopDelay = 2000,\n}: TypewriterTitleProps) {\n  const [scope, animate] = useAnimate();\n\n  useEffect(() => {\n    let isActive = true;\n\n    const typeText = async () => {\n      const titleElement = scope.current.querySelector(\"[data-typewriter]\");\n      if (!titleElement) return;\n\n      while (isActive) {\n        // Reset the text content\n        await animate(scope.current, { opacity: 1 });\n        titleElement.textContent = \"\";\n\n        // Wait for initial delay on first run\n        await new Promise((resolve) => setTimeout(resolve, startDelay));\n\n        // Process each sequence\n        for (const sequence of sequences) {\n          if (!isActive) break;\n\n          // Type out the sequence text\n          for (let i = 0; i < sequence.text.length; i++) {\n            if (!isActive) break;\n            titleElement.textContent = sequence.text.slice(0, i + 1);\n            await new Promise((resolve) => setTimeout(resolve, typingSpeed));\n          }\n\n          // Pause after typing if specified\n          if (sequence.pauseAfter) {\n            await new Promise((resolve) =>\n              setTimeout(resolve, sequence.pauseAfter)\n            );\n          }\n\n          // Delete the text if specified\n          if (sequence.deleteAfter) {\n            // Small pause before deleting\n            await new Promise((resolve) => setTimeout(resolve, 500));\n\n            for (let i = sequence.text.length; i > 0; i--) {\n              if (!isActive) break;\n              titleElement.textContent = sequence.text.slice(0, i);\n              await new Promise((resolve) =>\n                setTimeout(resolve, typingSpeed / 2)\n              );\n            }\n          }\n        }\n\n        if (!(autoLoop && isActive)) break;\n\n        // Wait before starting next loop\n        await new Promise((resolve) => setTimeout(resolve, loopDelay));\n      }\n    };\n\n    typeText();\n\n    // Cleanup function to stop the animation when component unmounts\n    return () => {\n      isActive = false;\n    };\n  }, [sequences, typingSpeed, startDelay, autoLoop, loopDelay, animate, scope]);\n\n  return (\n    <div className=\"relative mx-auto w-full max-w-4xl py-24\">\n      <div\n        className=\"relative z-10 flex flex-col items-center justify-center text-center\"\n        ref={scope}\n      >\n        <motion.div\n          animate={{ opacity: 1 }}\n          className=\"flex items-center gap-2 font-mono text-4xl text-black tracking-tight md:text-6xl dark:text-white\"\n          initial={{ opacity: 0 }}\n        >\n          <span\n            className=\"inline-block animate-cursor border-black border-r-2 pr-1 dark:border-white\"\n            data-typewriter\n          >\n            {sequences[0].text}\n          </span>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
      "path": "/components/kokonutui/type-writer.tsx",
      "target": "components/kokonutui/type-writer.tsx"
    }
  ]
}